// _mixins.scss

@use "sass:meta";

// Import base styles
@import 'base';
// Import variables
@import 'variables';


// Mixin for static sizes
@mixin button-size($size) {
  padding: map-get(map-get($button-sizes, $size), 'padding');
  font-size: map-get(map-get($button-sizes, $size), 'font-size');
}


// Mixin for responsive sizes
@mixin responsive-size {
  // Apply small size styles by default
  @include button-size("sm");

  // Medium size styles
  @media screen and (min-width: $tablet-max-width) {
    @include button-size("md");
  }

  // Large size styles
  @media screen and (min-width: $desktop-min-width) {
    @include button-size("lg");
  }
}

// Mixin to generate button colors
@mixin generate-button-color($color) {
  $threshold: 60%; // Adjusted threshold for better empirical results
  background-color: $color;
  // Using a slightly higher threshold for switching to ensure text readability
  color: if(lightness($color) > $threshold, black, white);
}


// Mixin to generate button colors based on luminance function
@mixin generate-button-color-luminance($color) {
  background-color: $color;
  color: if(luminance($color) > 0.5, black, white);
}


// Mixin to generate base styles
@mixin generate-base-styles($type) {     
  // base properties for every style
  // cursor
  cursor: pointer;
  // text position
  display: inline-flex; // Allows the button to contain and center content
  align-items: center; // Vertically centers the content
  justify-content: center; // Horizontally centers the content
  // font
  font-family: #{meta.inspect($default-font-family)};
  font-weight: bold; // Make text bold
  // Different properties 
  @each $key, $value in map-get($button-styles, $type) {
    #{$key}: #{$value};
  }
}